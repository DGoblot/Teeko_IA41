import random
from Game import GameJ
import copy
class Ia:

    def __init__(self,GameJ,player):
        self.GameJ=GameJ
        self.player=player


    def niveauFacile(self):
        if self.GameJ.pions_restant != 0:
            while 1:
                x = random.randint(0, 4)
                y = random.randint(0, 4)
                if self.GameJ.mettrePions(int(x), int(y)):
                    break
        else:
            while 1:
                x = random.randint(0, 4)
                y = random.randint(0, 4)
                a = random.randint(0, 4)
                b = random.randint(0, 4)
                if self.GameJ.movePions(int(x), int(y), int(a), int(b)):
                    break




    def nextStatsPlace(self,plateau):
        ns=[]
        coordonnee=[]
        for i in range(0,5):
            for j in range(0,5):
                copyPlateau=copy.deepcopy(plateau)

                if copyPlateau.mettrePions(i,j):
                    ns.append(copyPlateau)
                    coordonnee.append([i,j])
                    copyPlateau.affichePl()
        return [ns,coordonnee]

    def nextStatesMovie(self,plateau):
        ns=[]
        coordonnee = []
        for i in range(0,5):
            for j in range(0,5):

                if self.GameJ.plateau[i][j]==self.player:

                    position=self.GameJ.positionAdjacente(i,j)

                    for pos in position:
                        copyPlateau = copy.deepcopy(plateau)
                        print(pos)
                        if copyPlateau.movePions(i,j,pos[0],pos[1]):
                            print("test")
                            ns.append(copyPlateau)
                            copyPlateau.affichePl()
                            coordonnee.append([i,j,pos[0],pos[1]])
        return [ns,coordonnee]





    def alphaBeta(self,depth,niveau):
        alpha=-10000
        beta=10000
        v=-10000
        tmp=0
        if self.GameJ.pions_restant>8:
            meilleur_l=0
            meilleur_c=0
            for l in range(0,5):
                for c in range(0,5):
                    copyPlateau = copy.deepcopy(self.GameJ)
                    if copyPlateau.mettrePions(l, c):
                        tmp = self.min(copyPlateau,depth - 1, alpha, beta)

                        if tmp<v:
                            v=tmp
                            meilleur_l=l
                            meilleur_c=c
            self.GameJ.mettrePions(meilleur_l,meilleur_c)
        else:
            meilleur_l1 = 0
            meilleur_c1 = 0
            meilleur_l2 = 0
            meilleur_c2 = 0
            for l in range(0, 5):
                for c in range(0, 5):
                    copyPlateau = copy.deepcopy(self.GameJ)
                    adjacents = copyPlateau.getAdjacent(l, c)

        return v

    def maxValue(self,GameJ,depth,alpha,beta,niveau,isMax):
        if GameJ.winner() or depth==0 :
            return self.eval(GameJ)
        else:
            bestScore=float('-inf')



    def eval(self):
        pass

